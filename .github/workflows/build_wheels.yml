name: Manual build Stan models

on:
  workflow_dispatch: {}

env:
  CMDSTAN_VERSION: "2.36.0"   # keep in sync with setup.py

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Upgrade pip + install build deps
        run: python -m pip install -U pip setuptools wheel "cmdstanpy==1.2.*"

      # Optional: cache a home-dir CmdStan to speed up repeated manual runs.
      # NOTE: setup.py installs/prunes CmdStan inside the build dir when GLORIA_REPACKAGE_CMDSTAN=TRUE,
      # so this cache is only useful if you later change setup.py to reuse ~/.cmdstan.
      - name: Cache ~/.cmdstan (optional)
        uses: actions/cache@v4
        with:
          path: ~/.cmdstan
          key: ${{ runner.os }}-cmdstan-${{ env.CMDSTAN_VERSION }}

      - name: Build wheel via setup.py (repackage cmdstan)
        env:
          GLORIA_REPACKAGE_CMDSTAN: "TRUE"
        run: |
          python setup.py bdist_wheel
          python - <<'PY'
          import pathlib
          dist = pathlib.Path("dist")
          wheels = list(dist.glob("*.whl"))
          print("Built wheel(s):", [str(p) for p in wheels] or "none")
          PY

      - name: List build/lib contents
        shell: bash
        run: |
          echo "== Wheels in dist =="
          ls -l dist || true
          echo "== build/lib listing (if present) =="
          if [ -d "build/lib" ]; then
            find build/lib -maxdepth 4 -type f | sort
          else
            echo "No build/lib directory found."
          fi

      - name: Zip build/lib (separate Python step)
        run: |
          python - <<'PY'
          import pathlib, shutil
          root = pathlib.Path("build/lib")
          outdir = pathlib.Path("artifact_tree")
          outdir.mkdir(exist_ok=True)
          out = outdir / "build_lib.zip"
          if root.exists():
              shutil.make_archive(str(out.with_suffix('')), 'zip', str(root))
              print("Zipped", out)
          else:
              print("No build/lib directory; skipping zip")
          PY

      - name: Upload artifacts (wheel + build tree zip)
        uses: actions/upload-artifact@v4
        with:
          name: stan-build-${{ matrix.os }}
          path: |
            dist/*.whl
            artifact_tree/*.zip
